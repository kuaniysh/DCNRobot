*** Settings ***
Documentation     控制Station的关键字集合，使用规范：
...
...               ---
...               1. *打开/关闭ssh connection:*
...               - 通过ssh登陆terminal，控制station
...               - 在直接包含test case的test suite内通过关键字Open SSH Connection连接，一般放在setup内
...               - *注意: 在执行Open SSH Connection的test suite结束时，需要关闭cosole，在teardown里使用Close SSH Connection*
...               - *注意: 需要在每个直接包含测试例的test suite内使用Open SSH Connection，teardown里使用Close SSH Connection*
...               - 测试模块初始化的过程，如果需要控制station，需要在初始化关键字的开始使用Open SSH Connection，在初始化关键字的结束时关闭Close SSH Connection，一般初始化关键字在最高层test suite的setup中
...               - 测试模块清理配置的过程，如果需要控制station，需要在清理配置的关键字的开始使用Open SSH Connection，在清理配置的关键字的结束时关闭Close SSH Connection，一般清理配置的关键字在最高层test suite的teardown中
...
...               ---
...               2. *执行命令,获取结果*
...               - 执行命令的关键字有：Execute Command；Start Command，Read Command Output；Write，Read Until Prompt等
...               - Execute Command一般用于非交互式的命令（每个Execute Command都会打开一个shell），比如ifconfig，同时该命令是同步的，也就是说需要等到命令执行完毕才返回
...               - Start Command一般用于非交互式的命令，但该命令式异步的，就是说是在后台执行，会立即返回，命令的结果使用Read Command Output读取
...               - Write一般用于交互式的命令（所有的Write在一个shell上），比如需要输入Y/N的命令或者对环境变量有依赖的命令，该命令的返回信息通过Read，Read Until Prompt等读取
...
...               ---
...               3. *常用命令:*
...               - Sta Wep Open Connect
...               - Sta Wep Shared Connect
...               - Sta Wpa Open Connect
...               - Sta Wpa Psk Connect
...               - Sta Wpa2 Psk Connect
...               - Sta Wpa Eap Connect
...               - Sta Wpa2 Eap Connect
...               - Sta Wap Disconnect
...               - Sta Dhclient
...               - Sta Get Interface Ip
...               - Check Sta Ping
...
...               ---
...               4. *注意事项*
...               - 命令执行结束的标志为匹配到提示符，timeout时间为1分钟，如果命令的执行时间多于1分钟，用Sa.Set Client Configuration暂时修改timeout时间，然后执行完毕后再恢复默认值
Library           SSHLibrary
Library           ../lib/Tools.py

*** Variables ***
${sc_prompt}      \#
${sc_timeout}     ${60}
${sc_newline}     ${None}
${sc_path_separator}    ${None}

*** Keywords ***
Open SSH Connection
    [Arguments]    ${host}    ${alias}    ${username}    ${password}    ${port}=${22}
    [Documentation]    Opens a new SSH connection to the given `host` and `port`. and login by username and password
    ...
    ...    The new connection is made active. Possible existing connections are left open in the background.
    ...
    ...    `alias` can be given for the connection and can be used for switching between connections, similarly as the index.See `Switch Connection` for more details.
    ...
    ...    All the arguments, except `host`, `alias` and `port`can be later updated with `Set Client Configuration`.
    ...
    ...    Port `22` is assumed by default:
    ...    | Open SSH Connection | 192.168.1.1 | ${stat} |
    ...
    ...    Non-standard port may be given as an argument:
    ...    | Open SSH Connection | 192.168.1.1 | ${stat} | port=23 |
    SSHLibrary.Open Connection    ${host}    ${alias}    port=${port}    timeout=${sc_timeout}    prompt=${sc_prompt}    newline=${sc_newline}
    ...    path_separator=${sc_path_separator}
    SSHLibrary.Login    ${username}    ${password}

Close SSH Connection
    [Arguments]    ${alias}
    [Documentation]    Closes the \ connection.
    ...
    ...    Example:
    ...    | Close Connection | ${stat} |
    SSHLibrary.Switch Connection    ${alias}
    SSHLibrary.Close Connection

Close All SSH Connections
    [Documentation]    Closes all open connections.
    ...
    ...    \ \ \ \ \ This keyword is ought to be used either in test or suite teardown to
    ...    \ \ \ \ make sure all the connections are closed before the test execution
    ...    \ \ \ finishes.
    ...
    ...    \ Example:
    ...    | # Do something with the connections \ \ \ \ |
    ...    | [Teardown] \ \ \ \ \ | Close all connections |
    SSHLibrary.Close All Connections

Execute Command
    [Arguments]    ${alias}    ${cmd}    ${return_stdout}=${True}    ${return_stderr}=${False}    ${return_rc}=${False}
    [Documentation]    Executes `command` on the remote machine and returns its outputs.
    ...
    ...    \ \ \ \ \ This keyword executes the `command` and returns after the execution
    ...    \ \ \ \ has been finished. Use `Start Command` if the command should be
    ...    \ \ \ started on the background.
    ...
    ...    \ By default, only the standard output is returned:
    ...    | ${stdout}= \ \ \ \ | Execute Command | ${stat} | echo 'Hello John!' |
    ...    | Should Contain | ${stdout} \ \ \ \ \ \ | Hello John! \ \ \ \ \ \ \ |
    ...
    ...    Arguments `return_stdout`, `return_stderr` and `return_rc` are used
    ...    to specify, what is returned by this keyword.
    ...    If several arguments evaluate to true, multiple values are returned.
    ...    Non-empty strings, except `false` and `False`, evaluate to true.
    ...
    ...    If errors are needed as well, set the respective argument value to true:
    ...    | ${stdout} \ \ \ \ \ \ | ${stderr}= | Execute Command | ${stat} | echo 'Hello John!' | return_stderr=${True} |
    ...    | Should Be Empty | ${stderr} \ |
    ...
    ...    Often checking the return code is enough:
    ...    | ${rc}= \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ | Execute Command | ${stat} | echo 'Hello John!' | return_stdout=${False} | return_rc=${True} |
    ...    | Should Be Equal As Integers | ${rc} \ \ \ \ \ \ \ \ \ \ | 0 \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ | # succeeded \ \ \ \ \ \ \ \ |
    ...
    ...    The `command` is always executed in a new shell. Thus possible changes
    ...    to the environment (e.g. changing working directory) are not visible
    ...    to the later keywords:
    ...    | ${pwd}= \ \ \ \ \ \ \ \ | Execute Command | ${stat} | pwd \ \ \ \ \ \ \ \ \ \ |
    ...    | Should Be Equal | ${pwd} \ \ \ \ \ \ \ \ \ | /home/johndoe |
    ...    | Execute Command | ${stat} | cd /tmp \ \ \ \ \ \ \ \ |
    ...    | ${pwd}= \ \ \ \ \ \ \ \ | Execute Command | ${stat} | pwd \ \ \ \ \ \ \ \ \ \ |
    ...    | Should Be Equal | ${pwd} \ \ \ \ \ \ \ \ \ | /home/johndoe |
    ...
    ...    `Write` and `Read` can be used for
    ...    [#Interactive shells|running multiple commands in the same shell].
    ...
    ...    This keyword logs the executed command and its exit status with
    ...    log level `INFO`.
    SSHLibrary.Switch Connection    ${alias}
    ${output}=    SSHLibrary.Execute Command    ${cmd}    return_stdout=${return_stdout}    return_stderr=${return_stderr}    return_rc=${return_rc}
    [Return]    ${output}

Start Command
    [Arguments]    ${alias}    ${cmd}
    [Documentation]    Starts execution of the `command` on the remote machine and returns immediately.
    ...
    ...    \ \ \ \ \ This keyword returns nothing and does not wait for the `command`
    ...    \ \ \ \ execution to be finished. If waiting for the output is required,
    ...    \ \ \ use `Execute Command` instead.
    ...
    ...    \ This keyword does not return any output generated by the started
    ...    `command`. Use `Read Command Output` to read the output:
    ...    | Start Command \ \ | ${stat} | echo 'Hello John!' \ |
    ...    | ${stdout}= \ \ \ \ \ | Read Command Output | ${stat} |
    ...    | Should Contain \ | ${stdout} \ \ \ \ \ \ \ \ \ \ | Hello John! |
    ...
    ...    The `command` is always executed in a new shell, similarly as with
    ...    `Execute Command`. Thus possible changes to the environment
    ...    (e.g. changing working directory) are not visible to the later keywords:
    ...    | Start Command \ \ | ${stat} | pwd \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ |
    ...    | ${pwd}= \ \ \ \ \ \ \ \ | Read Command Output |
    ...    | Should Be Equal | ${pwd} \ \ \ \ \ \ \ \ \ \ \ \ \ | /home/johndoe |
    ...    | Start Command \ \ | ${stat} | cd /tmp \ \ \ \ \ \ \ \ \ \ \ \ |
    ...    | Start Command \ \ | ${stat} | pwd \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ |
    ...    | ${pwd}= \ \ \ \ \ \ \ \ | Read Command Output | ${stat} |
    ...    | Should Be Equal | ${pwd} \ \ \ \ \ \ \ \ \ \ \ \ \ | /home/johndoe |
    ...
    ...    `Write` and `Read` can be used for
    ...    [#Interactive shells|running multiple commands in the same shell].
    ...
    ...    This keyword logs the started command with log level `INFO`.
    SSHLibrary.Switch Connection    ${alias}
    SSHLibrary.Start Command    ${cmd}

Read Command Output
    [Arguments]    ${alias}    ${return_stdout}=${True}    ${return_stderr}=${False}    ${return_rc}=${False}
    [Documentation]    Returns outputs of the most recent started command.
    ...
    ...    \ \ \ \ \ At least one command must have been started using `Start Command`
    ...    \ \ \ \ before this keyword can be used.
    ...
    ...    \ \ By default, only the standard output of the started command is returned:
    ...    \ | Start Command \ | ${stat} | echo 'Hello John!' \ |
    ...    | ${stdout}= \ \ \ \ | Read Command Output | ${stat} |
    ...    | Should Contain | ${stdout} \ \ \ \ \ \ \ \ \ \ | Hello John! |
    ...
    ...    Arguments `return_stdout`, `return_stderr` and `return_rc` are used
    ...    to specify, what is returned by this keyword.
    ...    If several arguments evaluate to true, multiple values are returned.
    ...    Non-empty strings, except `false` and `False`, evaluate to true.
    ...
    ...    If errors are needed as well, set the argument value to true:
    ...    | Start Command \ \ | ${stat} | echo 'Hello John!' |
    ...    | ${stdout} \ \ \ \ \ \ | ${stderr}= \ \ \ \ \ \ \ \ | Read Command Output | ${stat} | return_stderr=True |
    ...    | Should Be Empty | ${stderr} \ \ \ \ \ \ \ \ \ |
    ...
    ...    Often checking the return code is enough:
    ...    | Start Command \ \ \ \ \ \ \ \ \ \ \ \ \ \ | ${stat} | echo 'Hello John!' \ |
    ...    | ${rc}= \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ | Read Command Output | ${stat} | return_stdout=False | return_rc=True |
    ...    | Should Be Equal As Integers | ${rc} \ \ \ \ \ \ \ \ \ \ \ \ \ \ | 0 \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ | # succeeded \ \ \ |
    ...
    ...    Using `Start Command` and `Read Command Output` follows
    ...    'last in, first out' (LIFO) policy, meaning that `Read Command Output`
    ...    operates on the most recent started command, after which that command
    ...    is discarded and its output cannot be read again.
    ...
    ...    If several commands have been started, the output of the last started
    ...    command is returned. After that, a subsequent call will return the
    ...    output of the new last (originally the second last) command:
    ...    | Start Command \ | ${stat} | echo 'HELLO' \ \ \ \ \ \ \ |
    ...    | Start Command \ | ${stat} | echo 'SECOND' \ \ \ \ \ \ |
    ...    | ${stdout}= \ \ \ \ | Read Command Output | ${stat} |
    ...    | Should Contain | ${stdout} \ \ \ \ \ \ \ \ \ \ | 'SECOND' |
    ...    | ${stdout}= \ \ \ \ | Read Command Output | ${stat} |
    ...    | Should Contain | ${stdout} \ \ \ \ \ \ \ \ \ \ | 'HELLO' \ |
    ...
    ...    This keyword logs the read command with log level `INFO`.
    SSHLibrary.Switch Connection    ${alias}
    ${output}=    SSHLibrary.Read Command Output    return_stdout=${return_stdout}    return_stderr=${return_stderr}    return_rc=${return_rc}
    [Return]    ${output}

Execute Sudo Command
    [Arguments]    ${alias}    ${cmd}    ${password}    ${return_stdout}=${True}    ${return_stderr}=${False}    ${return_rc}=${False}
    [Documentation]    为了执行特权命令，加入sudo的支持，与Execute Command类似
    ...
    ...    args:
    ...    - ${alias}: sta别名
    ...    - ${cmd}: 命令
    ...    - ${password}: 密码
    ...    - ${return_stdout}: 返回stdout的信息，默认为True
    ...    - ${return_stderr}: 返回stderr的信息，默认为False
    ...    - ${return_rc}: 返回命令执行的返回值，默认为False
    SSHLibrary.Switch Connection    ${alias}
    SSHLibrary.Write    ${cmd}
    SSHLibrary.Read Until    :
    SSHLibrary.Write    ${password}
    ${output}=    SSHLibrary.Read Until Prompt
    [Return]    ${output}

Write
    [Arguments]    ${alias}    ${text}
    [Documentation]    Writes the given `text` on the remote machine and appends a newline.
    ...
    ...    \ \ \ \ \ This keyword returns and [#Interactive shells|consumes] the written
    ...    \ \ \ \ `text` (including the appended newline) from the server output.
    ...
    ...    \ \ Example:
    ...    \ | ${written}= \ \ \ \ \ \ \ | Write \ \ \ \ \ \ \ \ | ${stat} | su \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ |
    ...    | Should Contain \ \ \ \ | ${written} \ \ \ | su \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ | # Returns the consumed output \ |
    ...    | ${output}= \ \ \ \ \ \ \ \ | Read \ \ \ \ \ \ \ \ \ | ${stat} |
    ...    | Should Not Contain | ${output} \ \ \ \ | ${written} \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ | # Was consumed from the output |
    ...    | Should Contain \ \ \ \ | ${output} \ \ \ \ | Password: \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ |
    ...    | Write \ \ \ \ \ \ \ \ \ \ \ \ \ | ${stat} | invalidpasswd |
    ...    | ${output}= \ \ \ \ \ \ \ \ | Read \ \ \ \ \ \ \ \ \ | ${stat} |
    ...    | Should Contain \ \ \ \ | ${output} \ \ \ \ | su: Authentication failure |
    ...
    ...    See also `Write Bare`.
    SSHLibrary.Switch Connection    ${alias}
    ${output}=    SSHLibrary.Write    ${text}
    [Return]    ${output}=

Write Bare
    [Arguments]    ${alias}    ${text}
    [Documentation]    Writes the given `text` on the remote machine without appending a newline.
    ...
    ...    \ \ \ \ \ Unlike `Write`, this keyword returns and [#Interactive shells|consumes]
    ...    \ \ \ \ nothing.
    ...
    ...    \ \ Example:
    ...    \ | Write Bare \ \ \ \ | ${stat} | su\ \ \ \ \ |
    ...    | ${output}= \ \ \ \ | Read \ \ \ \ \ \ \ \ \ \ \ \ | ${stat} |
    ...    | Should Contain | ${output} \ \ \ \ \ \ \ | su \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ | # Was not consumed from output |
    ...    | Should Contain | ${output} \ \ \ \ \ \ \ | Password: \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ |
    ...    | Write Bare \ \ \ \ | ${stat} | invalidpasswd\ |
    ...    | ${output}= \ \ \ \ | Read \ \ \ \ \ \ \ \ \ \ \ \ | ${stat} |
    ...    | Should Contain | ${output} \ \ \ \ \ \ \ | su: Authentication failure |
    ...
    ...    See also `Write`.
    SSHLibrary.Switch Connection    ${alias}
    SSHLibrary.Write Bare    ${text}

Read
    [Arguments]    ${alias}    ${delay}=${None}
    [Documentation]    Consumes and returns everything available on the server output.
    ...
    ...    \ \ \ \ \ If `delay` is given, this keyword waits that amount of time and reads
    ...    \ \ \ \ output again. This wait-read cycle is repeated as long as further reads
    ...    \ \ \ return more output or the [#Default timeout|timeout] expires.
    ...    \ \ `delay` must be given in Robot Framework's time format (e.g. `5`,
    ...    \ `4.5s`, `3 minutes`, `2 min 3 sec`) that is explained in detail in
    ...    the User Guide.
    ...
    ...    This keyword is most useful for reading everything from
    ...    the server output, thus clearing it.
    ...
    ...    Example:
    ...    | Write \ \ \ \ \ \ \ \ \ \ | ${stat} | sudo su - \ \ \ \ | \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ |
    ...    | ${output}= \ \ \ \ \ | Read \ \ \ \ \ \ \ \ \ | ${stat} | delay=0.5s \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ |
    ...    | Should Contain \ | ${output} \ \ \ \ | [sudo] password for johndoe: |
    ...    | Write \ \ \ \ \ \ \ \ \ \ | ${stat} | secretpasswd \ | \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ |
    ...    | ${output}= \ \ \ \ \ | Read \ \ \ \ \ \ \ \ \ | ${stat} | # Shown in the console due to loglevel |
    ...    | Should Contain \ | ${output} \ \ \ \ | root@ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ |
    SSHLibrary.Switch Connection    ${alias}
    ${output}=    SSHLibrary.Read    delay=${delay}
    [Return]    ${output}

Read Until Prompt
    [Arguments]    ${alias}    ${timeout}=${None}
    [Documentation]    Consumes and returns the server output until the prompt is found.
    ...
    ...    \ \ \ \ \ Text up and until prompt is returned. [#Default prompt|The prompt must
    ...    \ \ \ \ be set] before this keyword is used.
    ...
    ...    \ \ If [#Default timeout|the timeout] expires before the match is found,
    ...    \ this keyword fails.
    ...
    ...    This keyword is useful for reading output of a single command when
    ...    output of previous command has been read and that command does not
    ...    produce prompt characters in its output.
    ...
    ...
    ...    Example:
    ...    | Write \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ | ${stat} | sudo su - \ \ \ \ \ \ \ \ | \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ |
    ...    | Write \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ | ${stat} | ${PASSWORD} \ \ \ \ \ \ | \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ |
    ...    | Set Client Configuration | ${stat} | \ prompt=# \ \ \ \ \ \ \ \ \ | # For root, the prompt is # |
    ...    | ${output}= \ \ \ \ \ \ \ \ \ \ \ \ \ \ | Read Until Prompt | ${stat} |
    ...    | Should End With \ \ \ \ \ \ \ \ \ | ${output} \ \ \ \ \ \ \ \ | root@myserver:~# |
    SSHLibrary.Switch Connection    ${alias}
    ${timeoutFlag}=    Tools.Is None    ${timeout}
    Run Keyword If    not ${timeoutFlag}    SSHLibrary.Set Client Configuration    timeout=${timeout}
    ${output}=    SSHLibrary.Read Until Prompt
    Run Keyword If    not ${timeoutFlag}    SSHLibrary.Set Client Configuration    timeout=${sc_timeout}
    [Return]    ${output}

Read Until Regexp
    [Arguments]    ${alias}    ${regexp}    ${timeout}=${None}
    [Documentation]    Consumes and returns the server output until a match to `regexp` is found.
    ...
    ...    \ \ \ \ \ `regexp` can be a pattern or a compiled regexp object.
    ...
    ...    \ \ \ Text up until and including the `regexp` will be returned.
    ...
    ...    \ Regular expression check is implemented using the Python
    ...    [http://docs.python.org/2/library/re.html|re module]. Python's regular
    ...    expression syntax is derived from Perl, and it is thus also very
    ...    similar to the syntax used, for example, in Java, Ruby and .NET.
    ...
    ...    Things to note about the `regexp` syntax:
    ...
    ...    - Backslash is an escape character in the test data, and possible
    ...    backslashes in the pattern must thus be escaped with another backslash
    ...    (e.g. '\\\\d\\\\w+').
    ...
    ...    - Possible flags altering how the expression is parsed (e.g.
    ...    re.IGNORECASE, re.MULTILINE) can be set by prefixing the pattern with
    ...    the '(?iLmsux)' group (e.g. '(?im)pattern'). The available flags are
    ...    'IGNORECASE': 'i', 'MULTILINE': 'm', 'DOTALL': 's', 'VERBOSE': 'x',
    ...    'UNICODE': 'u', and 'LOCALE': 'L'.
    ...
    ...    If [#Default timeout|the timeout] expires before the match is found,
    ...    this keyword fails.
    ...
    ...    Example:
    ...    | Write \ \ \ \ \ \ \ \ \ \ | ${stat} | sudo su - \ \ \ \ \ \ \ \ | \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ |
    ...    | ${output}= \ \ \ \ \ | Read Until Regexp | ${stat} | \\\\[.*\\\\].*: \ \ \ \ \ \ \ \ \ \ \ \ \ |
    ...    | Should Contain \ | ${output} \ \ \ \ \ \ \ \ | [sudo] password for johndoe: |
    ...    | Write \ \ \ \ \ \ \ \ \ \ | ${stat} | ${PASSWORD} \ \ \ \ \ \ | \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ |
    ...    | ${output}= \ \ \ \ \ | Read Until Regexp | ${stat} | .*@ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ |
    ...    | Should Contain \ | ${output} \ \ \ \ \ \ \ \ | root@ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ |
    SSHLibrary.Switch Connection    ${alias}
    ${timeoutFlag}=    Tools.Is None    ${timeout}
    Run Keyword If    not ${timeoutFlag}    SSHLibrary.Set Client Configuration    timeout=${timeout}
    ${output}=    SSHLibrary.Read Until Regexp    ${regexp}
    Run Keyword If    not ${timeoutFlag}    SSHLibrary.Set Client Configuration    timeout=${timeout}
    [Return]    ${output}

Set Client Configuration
    [Arguments]    ${alias}    ${timeout}=${None}    ${newline}=${None}    ${prompt}=${None}    ${term_type}=${None}    ${width}=${None}
    ...    ${height}=${None}    ${path_separator}=${None}    ${encoding}=${None}
    [Documentation]    Update the `configuration` of the current connection.
    ...
    ...    \ \ \ \ \ Only parameters whose value is other than `None` are updated.
    ...
    ...    \ \ \ In the following example, [#Default prompt|`prompt`] is set for
    ...    \ \ the current connection. Other settings are left intact:
    ...    \ | Set Client Configuration | ${stat} | prompt=$ \ \ \ \ \ \ \ \ \ \ |
    ...
    ...    Using keyword does not affect the other connections:
    ...    | Set Client Configuration | ${stat} | prompt=$ \ \ \ \ \ \ \ \ \ \ | \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ | # Only linux.server.com affected \ \ |
    ...    | Set Client Configuration | ${stat} | prompt=> \ \ \ \ \ \ \ \ \ \ | \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ | # Only windows.server.com affected |
    ...
    ...    Multiple settings are possible. This example updates [#Default terminal
    ...    settings|the terminal settings] of the current connection:
    ...    | Set Client Configuration | term_type=ansi | width=40 |
    ...
    ...    Arguments [#Default path separator|`path_separator`] and
    ...    [#Default encoding|`encoding`]
    ...    were added in SSHLibrary 2.0.
    SSHLibrary.Switch Connection    ${alias}
    SSHLibrary.Set Client Configuration    timeout=${timeout}    newline=${newline}    prompt=${prompt}    term_type=${term_type}    width=${width}    height=${height}
    ...    path_separator=${path_separator}    encoding=${encoding}

Sta Wpa Disconnect
    [Arguments]    ${alias}    ${netcard_name}    ${forceFlag}=${False}
    [Documentation]    断开连接
    ...
    ...    args：
    ...    - ${alias}: sta别名
    ...    - ${netcard_name}: 接口名称
    ...    - ${forceFlag}: 强制接口down/up，默认False
    Sta.Execute Command    ${alias}    dhclient -r ${netcard_name}
    Run Keyword If    ${forceFlag}    Sta.Execute Command    ${alias}    ifconfig ${netcard_name} down
    Sta.Execute Command    ${alias}    wpa_cli -i ${netcard_name} disable_network 0
    Sta.Execute Command    ${alias}    wpa_cli -i ${netcard_name} remove_network 0
    Sta.Execute Command    ${alias}    dhclient -r ${netcard_name}
    Run Keyword If    ${forceFlag}    Sta.Execute Command    ${alias}    ifconfig ${netcard_name} up
    Sleep    2

For Sta Wpa Connect WirelessNetwork1
    [Arguments]    ${alias}    ${netcard_name}    ${ssid}    ${bssid}=${None}
    [Documentation]    在Sta Wpa Open Connect WirelessNetwork等关键字中使用，请勿单独使用
    Sta.Write    ${alias}    dhclient -r ${netcard_name}
    Sta.Read Until Prompt    ${alias}
    Sleep    2
    Sta.Write    ${alias}    ifconfig ${netcard_name} up
    Sta.Read Until Prompt    ${alias}
    Sleep    2
    Sta.Write    ${alias}    dmesg -c | grep ppppppppppp
    Sta.Read Until Prompt    ${alias}
    Sta.Write    ${alias}    wpa_cli -i ${netcard_name} remove_network 0
    Sta.Read Until Prompt    ${alias}
    Sta.Write    ${alias}    wpa_cli -i ${netcard_name} add_network 0
    Sta.Read Until Prompt    ${alias}
    Sta.Write    ${alias}    wpa_cli -i ${netcard_name} set_network 0 ssid '"${ssid}"'
    Sta.Read Until Prompt    ${alias}
    ${bssidFlag}=    Tools.Is None    ${bssid}
    ${transBssid}=    Run Keyword If    not ${bssidFlag}    Tools.Convert Macaddress Format    ${bssid}    -    :
    Run Keyword If    not ${bssidFlag}    Sta.Write    ${alias}    wpa_cli -i ${netcard_name} set_network 0 bssid ${transBssid}
    Run Keyword If    not ${bssidFlag}    Sta.Read Until Prompt    ${alias}

Sta Wpa Open Connect
    [Arguments]    ${alias}    ${netcard_name}    ${ssid}    ${bssid}=${None}
    [Documentation]    参数：
    ...    - netcard_name: 网卡名称，比如wlan0
    ...    - ssid：
    ...    - bssid：默认为None，可以不填
    ...
    ...    返回：关联是否成功
    ...    - True：成功
    ...    - False：不成功
    Sta.For Sta Wpa Connect WirelessNetwork1    ${alias}    ${netcard_name}    ${ssid}    ${bssid}
    Sta.Write    ${alias}    wpa_cli -i ${netcard_name} set_network 0 key_mgmt NONE
    Sta.Read Until Prompt    ${alias}
    ${retFlag}=    Sta.For Sta Wpa Connect WirelessNetwork2    ${alias}    ${netcard_name}    ${ssid}
    [Return]    ${retFlag}

Sta Wpa Psk Connect
    [Arguments]    ${alias}    ${netcard_name}    ${ssid}    ${psk}    ${encryption}    ${bssid}=${None}
    [Documentation]    参数：
    ...    - netcard_name: 网卡名称，比如wlan0
    ...    - ssid：
    ...    - psk:
    ...    - encryption: 加密算法 选择 CCMP TKIP
    ...    - bssid：默认为None，可以不填
    ...
    ...    返回：关联是否成功
    ...    - True：成功
    ...    - False：不成功
    Sta.For Sta Wpa Connect WirelessNetwork1    ${alias}    ${netcard_name}    ${ssid}    ${bssid}
    Sta.Write    ${alias}    wpa_cli -i ${netcard_name} set_network 0 key_mgmt WPA-PSK
    Sta.Read Until Prompt    ${alias}
    Sta.Write    ${alias}    wpa_cli -i ${netcard_name} set_network 0 proto WPA
    Sta.Read Until Prompt    ${alias}
    Sta.Write    ${alias}    wpa_cli -i ${netcard_name} set_network 0 pairwise ${encryption}
    Sta.Read Until Prompt    ${alias}
    Sta.Write    ${alias}    wpa_cli -i ${netcard_name} set_network 0 group ${encryption}
    Sta.Read Until Prompt    ${alias}
    Sta.Write    ${alias}    wpa_cli -i ${netcard_name} set_network 0 psk '"${psk}"'
    Sta.Read Until Prompt    ${alias}
    ${retFlag}=    Sta.For Sta Wpa Connect WirelessNetwork2    ${alias}    ${netcard_name}    ${ssid}
    [Return]    ${retFlag}

Sta Wpa2 Psk Connect
    [Arguments]    ${alias}    ${netcard_name}    ${ssid}    ${psk}    ${encryption}    ${bssid}=${None}
    [Documentation]    参数：
    ...    - netcard_name: 网卡名称，比如wlan0
    ...    - ssid：
    ...    - psk:
    ...    - encryption: 加密算法 选择 CCMP TKIP
    ...    - bssid：默认为None，可以不填
    ...
    ...    返回：关联是否成功
    ...    - True：成功
    ...    - False：不成功
    Sta.For Sta Wpa Connect WirelessNetwork1    ${alias}    ${netcard_name}    ${ssid}    ${bssid}
    Sta.Write    ${alias}    wpa_cli -i ${netcard_name} set_network 0 key_mgmt WPA-PSK
    Sta.Read Until Prompt    ${alias}
    Sta.Write    ${alias}    wpa_cli -i ${netcard_name} set_network 0 proto WPA2
    Sta.Read Until Prompt    ${alias}
    Sta.Write    ${alias}    wpa_cli -i ${netcard_name} set_network 0 pairwise ${encryption}
    Sta.Read Until Prompt    ${alias}
    Sta.Write    ${alias}    wpa_cli -i ${netcard_name} set_network 0 group ${encryption}
    Sta.Read Until Prompt    ${alias}
    Sta.Write    ${alias}    wpa_cli -i ${netcard_name} set_network 0 psk '"${psk}"'
    Sta.Read Until Prompt    ${alias}
    ${retFlag}=    Sta.For Sta Wpa Connect WirelessNetwork2    ${alias}    ${netcard_name}    ${ssid}
    [Return]    ${retFlag}

For Sta Wpa Connect WirelessNetwork2
    [Arguments]    ${alias}    ${netcard_name}    ${ssid}
    [Documentation]    在Sta Wpa Open Connect WirelessNetwork等关键字中使用，请勿单独使用
    Sta.Write    ${alias}    wpa_cli -i ${netcard_name} enable_network 0
    Sta.Read Until Prompt    ${alias}
    : FOR    ${index}    IN RANGE    0    16
    \    Sta.Write    ${alias}    wpa_cli -i ${netcard_name} status
    \    ${output}=    Sta.Read Until Prompt    ${alias}
    \    ${matchFlag}=    Tools.Is Match From String    ${output}    (?is)ssid=${ssid}.*?wpa_state=COMPLETED
    \    Run Keyword If    ${matchFlag}    Exit For Loop
    \    Sleep    5
    [Return]    ${matchFlag}

Sta Dhclient
    [Arguments]    ${alias}    ${netcard_name}    ${timeout}=${60}
    [Documentation]    station 通过dhcp获取地址
    ...
    ...    参数
    ...    - timeout : 默认60s，执行dhclient获取地址的命令后，等待的时间
    ...
    ...    返回：
    ...    True：成功获取
    ...    False：未获取
    ...
    ...    获取的地址请用Sta Get Interface Ip 关键字
    Sta.Write    ${alias}    dhclient -nw ${netcard_name}
    Sta.Read Until Prompt    ${alias}
    Sleep    ${timeout}
    ${ip}=    Sta.Sta Get Interface Ip    ${alias}    ${netcard_name}
    ${retFlag}=    Tools.Is None    ${ip}
    ${retFlag}=    Evaluate    not ${retFlag}
    [Return]    ${retFlag}

Check Sta Ping
    [Arguments]    ${alias}    ${ipaddress}    ${pingCount}=10
    [Documentation]    注意：关键字返回的是ping失败率，如失败率为70%，则返回数字70
    ...
    ...    | Check Sta Ping | ${sta_alias} | 10.1.1.1 |
    ${output}=    Sta.Execute Command    ${alias}    ping ${ipaddress} -c ${pingCount}
    ${lossStr}=    Tools.Get Value From String    ${output}    (\\d+)% packet loss
    ${lossValue}=    Convert To Integer    ${lossStr}
    Log    ${output}
    [Return]    ${lossValue}

Sta Wep Open Connect
    [Arguments]    ${alias}    ${netcard_name}    ${ssid}    ${bssid}=${None}    ${key0}=${None}    ${key1}=${None}
    ...    ${key2}=${None}    ${key3}=${None}    ${txkey}=0    ${keytype}=${0}
    [Documentation]    参数：
    ...    - netcard_name: 网卡名称，比如wlan0
    ...    - ssid：
    ...    - key0---key3: 默认为None，用到哪个key，可直接使用keyX= 赋值，比如用到key0，key1，可以 | key0=123456 | \ key1=123456 |
    ...    - keytype： 默认值为0，0指ASCII格式； 1指HEX格式；这里的0,1是数字，不是字符，请注意
    ...    - txkey:
    ...    - bssid：默认为None，可以不填
    ...
    ...
    ...    返回：关联是否成功
    ...    - True：成功
    ...    - False：不成功
    Sta.For Sta Wpa Connect WirelessNetwork1    ${alias}    ${netcard_name}    ${ssid}    ${bssid}
    Sta.Write    ${alias}    wpa_cli -i ${netcard_name} set_network 0 key_mgmt NONE
    Sta.Read Until Prompt    ${alias}
    ${keyFlag}=    Tools.Is None    ${key0}
    Run Keyword If    not ${keyFlag} and ${keytype} == 0    Set Test Variable    ${key0}    '"${key0}"'
    Run Keyword If    not ${keyFlag}    Sta.Write    ${alias}    wpa_cli -i ${netcard_name} set_network 0 wep_key0 ${key0}
    Run Keyword If    not ${keyFlag}    Sta.Read Until Prompt    ${alias}
    ${keyFlag}=    Tools.Is None    ${key1}
    Run Keyword If    not ${keyFlag} and ${keytype} == 0    Set Test Variable    ${key1}    '"${key1}"'
    Run Keyword If    not ${keyFlag}    Sta.Write    ${alias}    wpa_cli -i ${netcard_name} set_network 0 wep_key1 ${key1}
    Run Keyword If    not ${keyFlag}    Sta.Read Until Prompt    ${alias}
    ${keyFlag}=    Tools.Is None    ${key2}
    Run Keyword If    not ${keyFlag} and ${keytype} == 0    Set Test Variable    ${key2}    '"${key2}"'
    Run Keyword If    not ${keyFlag}    Sta.Write    ${alias}    wpa_cli -i ${netcard_name} set_network 0 wep_key2 ${key2}
    Run Keyword If    not ${keyFlag}    Sta.Read Until Prompt    ${alias}
    ${keyFlag}=    Tools.Is None    ${key3}
    Run Keyword If    not ${keyFlag} and ${keytype} == 0    Set Test Variable    ${key3}    '"${key3}"'
    Run Keyword If    not ${keyFlag}    Sta.Write    ${alias}    wpa_cli -i ${netcard_name} set_network 0 wep_key3 ${key3}
    Run Keyword If    not ${keyFlag}    Sta.Read Until Prompt    ${alias}
    Sta.Write    ${alias}    wpa_cli -i ${netcard_name} set_network 0 wep_tx_keyidx ${txkey}
    Sta.Read Until Prompt    ${alias}
    ${retFlag}=    Sta.For Sta Wpa Connect WirelessNetwork2    ${alias}    ${netcard_name}    ${ssid}
    [Return]    ${retFlag}

Sta Wep Shared Connect
    [Arguments]    ${alias}    ${netcard_name}    ${ssid}    ${bssid}=${None}    ${key0}=${None}    ${key1}=${None}
    ...    ${key2}=${None}    ${key3}=${None}    ${txkey}=0    ${keytype}=${0}
    [Documentation]    参数：
    ...    - netcard_name: 网卡名称，比如wlan0
    ...    - ssid：
    ...    - key0---key3: 默认为None，用到哪个key，可直接使用keyX= 赋值，比如用到key0，key1，可以 | key0=123456 | \ key1=123456 |
    ...    - keytype： 默认值为0，0指ASCII格式； 1指HEX格式；这里的0,1是数字，不是字符，请注意
    ...    - txkey:
    ...    - bssid：默认为None，可以不填
    ...
    ...
    ...    返回：关联是否成功
    ...    - True：成功
    ...    - False：不成功
    Sta.For Sta Wpa Connect WirelessNetwork1    ${alias}    ${netcard_name}    ${ssid}    ${bssid}
    Sta.Write    ${alias}    wpa_cli -i ${netcard_name} set_network 0 key_mgmt NONE
    Sta.Read Until Prompt    ${alias}
    Sta.Write    ${alias}    wpa_cli -i ${netcard_name} set_network 0 auth_alg SHARED
    Sta.Read Until Prompt    ${alias}
    ${keyFlag}=    Tools.Is None    ${key0}
    Run Keyword If    not ${keyFlag} and ${keytype} == 0    Set Test Variable    ${key0}    '"${key0}"'
    Run Keyword If    not ${keyFlag}    Sta.Write    ${alias}    wpa_cli -i ${netcard_name} set_network 0 wep_key0 ${key0}
    Run Keyword If    not ${keyFlag}    Sta.Read Until Prompt    ${alias}
    ${keyFlag}=    Tools.Is None    ${key1}
    Run Keyword If    not ${keyFlag} and ${keytype} == 0    Set Test Variable    ${key1}    '"${key1}"'
    Run Keyword If    not ${keyFlag}    Sta.Write    ${alias}    wpa_cli -i ${netcard_name} set_network 0 wep_key1 ${key1}
    Run Keyword If    not ${keyFlag}    Sta.Read Until Prompt    ${alias}
    ${keyFlag}=    Tools.Is None    ${key2}
    Run Keyword If    not ${keyFlag} and ${keytype} == 0    Set Test Variable    ${key2}    '"${key2}"'
    Run Keyword If    not ${keyFlag}    Sta.Write    ${alias}    wpa_cli -i ${netcard_name} set_network 0 wep_key2 ${key2}
    Run Keyword If    not ${keyFlag}    Sta.Read Until Prompt    ${alias}
    ${keyFlag}=    Tools.Is None    ${key3}
    Run Keyword If    not ${keyFlag} and ${keytype} == 0    Set Test Variable    ${key3}    '"${key3}"'
    Run Keyword If    not ${keyFlag}    Sta.Write    ${alias}    wpa_cli -i ${netcard_name} set_network 0 wep_key3 ${key3}
    Run Keyword If    not ${keyFlag}    Sta.Read Until Prompt    ${alias}
    Sta.Write    ${alias}    wpa_cli -i ${netcard_name} set_network 0 wep_tx_keyidx ${txkey}
    Sta.Read Until Prompt    ${alias}
    ${retFlag}=    Sta.For Sta Wpa Connect WirelessNetwork2    ${alias}    ${netcard_name}    ${ssid}
    [Return]    ${retFlag}

Sta Wpa Eap Connect
    [Arguments]    ${alias}    ${netcard_name}    ${ssid}    ${identity}    ${password}    ${encryption}
    ...    ${bssid}=${None}
    [Documentation]    参数：
    ...    - netcard_name: 网卡名称，比如wlan0
    ...    - ssid：
    ...    - identity:
    ...    - password
    ...    - encryption: 加密算法 选择 CCMP TKIP
    ...    - bssid：默认为None，可以不填
    ...
    ...    返回：关联是否成功
    ...    - True：成功
    ...    - False：不成功
    Sta.For Sta Wpa Connect WirelessNetwork1    ${alias}    ${netcard_name}    ${ssid}    ${bssid}
    Sta.Write    ${alias}    wpa_cli -i ${netcard_name} set_network 0 key_mgmt WPA-EAP
    Sta.Read Until Prompt    ${alias}
    Sta.Write    ${alias}    wpa_cli -i ${netcard_name} set_network 0 proto WPA
    Sta.Read Until Prompt    ${alias}
    Sta.Write    ${alias}    wpa_cli -i ${netcard_name} set_network 0 pairwise ${encryption}
    Sta.Read Until Prompt    ${alias}
    Sta.Write    ${alias}    wpa_cli -i ${netcard_name} set_network 0 group ${encryption}
    Sta.Read Until Prompt    ${alias}
    Sta.Write    ${alias}    wpa_cli -i ${netcard_name} set_network 0 eap PEAP
    Sta.Read Until Prompt    ${alias}
    Sta.Write    ${alias}    wpa_cli -i ${netcard_name} set_network 0 identity '"${identity}"'
    Sta.Read Until Prompt    ${alias}
    Sta.Write    ${alias}    wpa_cli -i ${netcard_name} set_network 0 password '"${password}"'
    Sta.Read Until Prompt    ${alias}
    ${retFlag}=    Sta.For Sta Wpa Connect WirelessNetwork2    ${alias}    ${netcard_name}    ${ssid}
    [Return]    ${retFlag}

Sta Wpa2 Eap Connect
    [Arguments]    ${alias}    ${netcard_name}    ${ssid}    ${identity}    ${password}    ${encryption}
    ...    ${bssid}=${None}
    [Documentation]    参数：
    ...    - netcard_name: 网卡名称，比如wlan0
    ...    - ssid：
    ...    - identity:
    ...    - password
    ...    - encryption: 加密算法 选择 CCMP TKIP
    ...    - bssid：默认为None，可以不填
    ...
    ...    返回：关联是否成功
    ...    - True：成功
    ...    - False：不成功
    Sta.For Sta Wpa Connect WirelessNetwork1    ${alias}    ${netcard_name}    ${ssid}    ${bssid}
    Sta.Write    ${alias}    wpa_cli -i ${netcard_name} set_network 0 key_mgmt WPA-EAP
    Sta.Read Until Prompt    ${alias}
    Sta.Write    ${alias}    wpa_cli -i ${netcard_name} set_network 0 proto WPA2
    Sta.Read Until Prompt    ${alias}
    Sta.Write    ${alias}    wpa_cli -i ${netcard_name} set_network 0 pairwise ${encryption}
    Sta.Read Until Prompt    ${alias}
    Sta.Write    ${alias}    wpa_cli -i ${netcard_name} set_network 0 group ${encryption}
    Sta.Read Until Prompt    ${alias}
    Sta.Write    ${alias}    wpa_cli -i ${netcard_name} set_network 0 eap PEAP
    Sta.Read Until Prompt    ${alias}
    Sta.Write    ${alias}    wpa_cli -i ${netcard_name} set_network 0 identity '"${identity}"'
    Sta.Read Until Prompt    ${alias}
    Sta.Write    ${alias}    wpa_cli -i ${netcard_name} set_network 0 password '"${password}"'
    Sta.Read Until Prompt    ${alias}
    ${retFlag}=    Sta.For Sta Wpa Connect WirelessNetwork2    ${alias}    ${netcard_name}    ${ssid}
    [Return]    ${retFlag}

Sta Get Interface Ip
    [Arguments]    ${alias}    ${netcard_name}
    [Documentation]    获取接口的ip地址
    ...
    ...    args：
    ...    - ${alias}: sta别名
    ...    - ${netcard_name}: 接口名称
    ${output}=    Sta.Execute Command    ${alias}    ip -f inet addr show ${netcard_name}
    ${ipaddress}=    Tools.Get Value From String    ${output}    (?m)inet\\s+(\\d+\\.\\d+\\.\\d+\\.\\d+)
    [Return]    ${ipaddress}
