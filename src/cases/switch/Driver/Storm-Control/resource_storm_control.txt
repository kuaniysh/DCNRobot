*** Settings ***
Documentation     Storm-Control资源文件,包括:
...               - 测试套变量
...               - 功能测试关键字
...               - 引用的其他资源文件
Resource          ../resource_driver.txt

*** Variables ***
${STATIC_UNICAST_MAC}    00:00:00:01:01:01
${CMD_STORM_CONTROL}    storm-control    # strom-control命令行,一般为storm-contrl,部分设备为rate-suppress
${CMD_CFG_STORM_CONTROL_MODE}    ${2}    # storm-control命令行风格 1:strom-control broadcast value_xxx 2: storm control broadcast [kbps|pps|..] value_xxx
${CMD_CFG_NO_STORM_CONTROL_MODE}    ${2}    # no storm-control命令行风格 1:no strom-control 2: no storm control broadcast
${SUPPORT_kbps}    ${1}    # 是否支持kbps的抑制,1为支持,0为不支持
${SUPPORT_pps}    ${1}    # 是否支持基于pps的抑制,1表示支持,0表示不支持

*** Keywords ***
Init StormControl pps Test
    [Documentation]    初始化storm-contro pps l测试套,初始化内容如下:
    ...
    ...    Open console
    ...
    ...    通过变量${SUPPORT_pps}检查设备是否支持基于pps的限速,若不支持,则记为WARN,并跳过运行
    ...
    ...    通过全局参数${CROSS_CHIP},${CROSS_SLOT},${CROSS_STACK_MEMBER},检查是否跨芯片连接,若不支持,则记为WARN,并跳过运行
    ...
    ...    连接ixia并复位Tp1与Tp2
    ...
    ...    在s1p2上配置静态mac地址,作为已知单播流量使用.
    Open Console    ${s1_ccm_ip}    ${s1_ccm_port}    ${s1_alias}
    tools.comment    ${s1_alias}    !!Start!! TEST SUITE:${SUITE_NAME}
    #    检查是否支持pps
    Run Keyword If    ${SUPPORT_pps}!=${1}    Fail    设备不支持基于pps的风暴抑制
    Run Keyword If    ${GLOBAL_StormControl_MODE}    Set Global Storm Control    ${s1_alias}    pps
    #    配置静态mac，为后面测试已知单播准备。
    Set Static Mac    ${s1_alias}    ${s1p2}    1    ${STATIC_UNICAST_MAC}
    #    #ixia初始化
    Connect To Ixia    ${testerp1_ip}
    Ixiasend.Set Port Mode Default    @{testerp1}
    Run Keyword if    "${testerp1_ip}"!="${testerp2_ip}"    Connect To Ixia    ${testerp2_ip}
    Ixiasend.Set Port Mode Default    @{testerp2}

Init StormControl kbps Test
    [Documentation]    初始化storm-contro pps l测试套,初始化内容如下:
    ...
    ...    Open console
    ...
    ...    通过变量${SUPPORT_kbps}检查设备是否支持基于kbps的限速,若不支持,则记为WARN,并跳过运行
    ...
    ...    通过全局参数${CROSS_CHIP},${CROSS_SLOT},${CROSS_STACK_MEMBER},检查是否跨芯片连接,若不支持,则记为WARN,并跳过运行
    ...
    ...    连接ixia并复位Tp1与Tp2
    ...
    ...    在s1p2上配置静态mac地址,作为已知单播流量使用.
    Open Console    ${s1_ccm_ip}    ${s1_ccm_port}    ${s1_alias}
    tools.comment    ${s1_alias}    !!Start!! TEST SUITE:${SUITE_NAME}
    #    检查是否支持pps
    Run Keyword if    ${SUPPORT_kbps}!=${1}    Fail    设备不支持基于kbps的风暴抑制    Not_Support_StormControl_kbps
    Run Keyword If    ${GLOBAL_StormControl_MODE}    Set Global Storm Control    ${s1_alias}    kbps
    #    配置静态mac，为后面测试已知单播准备。
    Set Static Mac    ${s1_alias}    ${s1p2}    1    ${STATIC_UNICAST_MAC}
    ##ixia初始化
    Connect To Ixia    ${testerp1_ip}
    Ixia.Set Port Mode Default    @{testerp1}
    Run Keyword if    "${testerp1_ip}"!="${testerp2_ip}"    Connect To Ixia    ${testerp2_ip}
    Ixia.Set Port Mode Default    @{testerp2}

Init StormControl Test
    [Documentation]    初始化storm-control测试套，对全局参数进行设置
    ...
    ...    通过命令行storm-control ? 确定设备是否支持基于"kbps"和"pps"为单位的风暴抑制配置。
    ...
    ...    如果支持，则将对应的${SUPPORT_kbps},${SUPPORT_pps}置位，并设置对应的命令行风格。
    ...
    ...    如果不支持，则默认为支持kbps限速，不支持pps限速。
    ...
    ...    通过命令行no storm-control ? 确定设备关闭storm-control时是否需要指定类型(broadcast,multicast等)并设置对应的命令行风格。
    Open Console    ${s1_ccm_ip}    ${s1_ccm_port}    ${s1_alias}
    tools.comment    ${s1_alias}    !!Start!! TEST SUITE:${SUITE_NAME}
    ##参数初始化
    tools.comment    确定是否支持kbps,pps并检查命令行配置模式
    ##    检查是否支持全局命令模式    rocket\rtk芯片设备支持
    Check Global Cmd Mode
    ##    如果不支持全局命令配置，则检查端口命令模式
    Run Keyword Unless    ${GLOBAL_StormControl_MODE}    Check Interface Cmd Mode
    close console    ${s1_alias}

Uninit Suite Test
    [Documentation]    恢复初始配置
    ...
    ...    删除静态mac配置
    ...
    ...    删除s1p1及s1p3上的风暴抑制配置
    ...
    ...    复位ixia端口
    ...
    ...    关闭console
    Del Static Mac    ${s1_alias}    ${s1p2}    1    00:00:00:01:01:01
    Exec Cmd List In ConfigMode    ${s1_alias}    no port-group 1
    Unset Storm Control    ${s1_alias}    ${s1p1}    broadcast
    Unset Storm Control    ${s1_alias}    ${s1p1}    multicast
    Unset Storm Control    ${s1_alias}    ${s1p1}    unicast
    Unset Storm Control    ${s1_alias}    ${s1p2}    broadcast
    Unset Storm Control    ${s1_alias}    ${s1p2}    multicast
    Unset Storm Control    ${s1_alias}    ${s1p2}    unicast
    Unset Storm Control    ${s1_alias}    ${s1p3}    broadcast
    Unset Storm Control    ${s1_alias}    ${s1p3}    multicast
    Unset Storm Control    ${s1_alias}    ${s1p3}    unicast
    Unset Global Storm Control    ${s1_alias}
    Ixia.Set Port Mode Default    @{testerp1}
    Ixia.Set Port Mode Default    @{testerp2}
    tools.comment    ${s1_alias}    !!END!! TEST SUITE:${SUITE_NAME}
    Close Console    ${s1_alias}

Send Stream And Check
    [Arguments]    ${sport_chassis}    ${sport_card}    ${sport_port}    ${dport_chassis}    ${dport_card}    ${dport_port}
    ...    ${received_type}    ${received_rate}    ${tolerance}=${0.05}    ${clear_tag}=True    ${transmit_tag}=True    ${stop_trans_tag}=True
    [Documentation]    功能:“清除计数”-->“发送流量”-->“检查流量”-->"停止流量发送"
    ...
    ...    \ args:
    ...    \- ${sport_chassis} ${sport_card} ${sport_port} #发送端口
    ...    \- ${dport_chassis} ${dport_card} ${dport_port}#接收端口
    ...    \- ${received_type}#接收流量单位(bps,pps)
    ...    \- ${received_rate}#预期接收速率
    ...    \- ${tolerance}#误差范围,缺省为0.05,即5%的误差
    ...    \- ${clear_tag} #check前,是否先清除计数，缺省清除
    ...    \- ${transmit_tag} #check前,是否控制流量发送,缺省发送
    ...    \- ${stop_trans_tag} #check后,是否停止流量发送,缺省停止发送流量
    ...
    ...    Example:
    ...    从15卡1口开始发送流量,检查15卡2口的收包bps速率是否为10000。
    ...    | Send Stream And Check | 1 | 15 | 1 | 1 | 15 | 2 | received_type=bps | received_rate=10000 |
    ...    tp1开始发送流量，检查tp2收包pps速率是否为1000，误差范围为0.1
    ...    | Send Stream And Check | @{testerp1} | @{testerp2} | pps | 1000 | tolerance=0.1 |
    ...    tp1开始发送流量，检查tp2收包速率是否为1000，检查后不停止发送流量
    ...    | Send Stream And Check | @{testerp1} | @{testerp2} | pps | 1000 | stop_trans_tag=False |
    @{sport}=    Set Variable    ${sport_chassis}    ${sport_card}    ${sport_port}
    @{dport}=    Set Variable    ${dport_chassis}    ${dport_card}    ${dport_port}
    Run Keyword If    ${clear_tag}==True    Ixiasend.Clear Statics    @{sport}
    Run Keyword If    ${clear_tag}==True    Ixiasend.Clear Statics    @{dport}
    Run Keyword If    ${transmit_tag}==True    Ixiasend.Start Transmit    @{sport}
    sleep    5s    等待桶令牌耗尽
    #    获取发包速率,用于出错时检查
    Get Statics    @{sport}    tx${received_type}
    ${ret}    CheckIxiaReceiveRate    @{dport}    ${received_type}    ${received_rate}    ${tolerance}
    #    ${ret}    Check Ixia Rx Average Rate    @{dport}    ${received_type}    ${received_rate}    ${tolerance}
    Run Keyword And Continue On Failure    Should Be True    ${ret}    ${TEST_NAME}\n check stream error!
    #    若检查有误, 则debug交换机
    Run Keyword unless    ${ret}    Repeat Keyword    2 times    Exec Cmd List    ${s1_alias}    show interface ${s1p1} | begin Statistics
    Run Keyword unless    ${ret}    Repeat Keyword    2 times    Exec Cmd List    ${s1_alias}    show interface ${s1p2} | begin Statistics
    Run Keyword If    ${stop_trans_tag}==True    Ixiasend.Stop Transmit    @{sport}
    [Return]    ${ret}

Set stream
    [Arguments]    ${tp_chassis}    ${tp_card}    ${tp_port}    ${stream_type}    ${stream_rate}    ${stream_rate_mode}
    ...    ${stream_id}=${1}    ${stream_mode}=${IXIA_StreamMode_continue}    ${reset}=False    ${numPacket}=${1}    ${returnID}=${1}
    [Documentation]    功能:设置ixia端口流量
    ...
    ...    \ args:
    ...    \- ${tp_chassis} ${tp_card} ${tp_port} #设置端口
    ...    \- ${stream_type} #流量类型(broadcast,multicast,unicast,dlf)
    ...    \- ${stream_rate}#流量速率
    ...    \- ${stream_rate_mode} #流量模式(bps,pps,percent)
    ...    \- ${stream_id}=${1} #发送流序号,缺省为1
    ...    \- ${stream_mode}=${IXIA_StreamMode_continue} #发送模式，continue，stop，next，return to id，缺省为continue
    ...    \- ${reset}=False #当reset为True时则set default port ixia端口，否则不reset; 缺省不reset
    ...    \- ${numPacket}=${1} #发送报文个数,在next和return模式下,用于控制发送指定数量报文后切换到指定流
    ...    \- ${returnID}=${1} #return ID,在return模式下,用于确定返回到指定流.缺省返回流1
    ...
    ...    Example:
    ...
    ...    在tp1上配置广播流量,速率为200000bps
    ...    | Set stream | @{testerp1} | broadcast | ${200000} | bps |
    ...    在tp1上配置stream 2为广播流量,以1000pps发送100个报文后返回到流1
    ...    | Set stream | @{testerp1} | broadcast | ${1000} | pps | stream_id=2 | stream_mode=${IXIA_StreamMode_return} | numPacket=${100} | retrunID=${1} |
    ...    先reset port,然后在tp1上配置stream 1为广播流量,以1000 bps 发送100个报文后转到下一条流
    ...    | Set stream | @{testerp1} | broadcast | ${1000} | bps | stream_id=1 | stream_mode=${IXIA_StreamMode_next} | numPacket=${100} | reset=True |
    ${stream_rate_mode_set}=    Set Variable If    '${stream_rate_mode}'=='bps'    ${IXIA_StreamRateMode_bps}    '${stream_rate_mode}'=='pps'    ${IXIA_StreamRateMode_pps}    '${stream_rate_mode}'=='pencent'
    ...    ${IXIA_StreamRateMode_pencent}
    @{sport}=    Set Variable    ${tp_chassis}    ${tp_card}    ${tp_port}
    Run Keyword If    ${reset}==True    Ixia.Set Port Mode Default    @{sport}
    Run Keyword    Set stream ${stream_type}    @{sport}    ${stream_rate}    ${stream_rate_mode_set}    ${stream_id}    ${stream_mode}
    ...    ${numPacket}    ${returnID}

Set stream broadcast
    [Arguments]    ${tp_chassis}    ${tp_card}    ${tp_port}    ${stream_rate}    ${stream_rate_mode}    ${stream_id}
    ...    ${stream_mode}=${IXIA_StreamMode_continue}    ${numPacket}=${1}    ${returnID}=${1}
    [Documentation]    设置广播流
    ...
    ...    \ args:
    ...    \- ${tp_chassis} ${tp_card} ${tp_port} #设置端口
    ...    \- ${stream_rate}#流量速率
    ...    \- ${stream_rate_mode} #流量模式,取值参考全局变量${Ixia_StreamRateMode_bps}等
    ...    \- ${stream_id}=${1} #发送流序号,缺省为1
    ...    \- ${stream_mode}=${IXIA_StreamMode_continue} #发送模式，continue，stop，next，return to id，缺省为continue
    ...    \- ${numPacket}=${1} #发送报文个数,在next和return模式下,用于控制发送指定数量报文后切换到指定流
    ...    \- ${returnID}=${1} #return ID,在return模式下,用于确定返回到指定流.缺省返回流1
    ...
    ...    Example:
    ...
    ...    在1,15,1上配置广播流量,速率为200000bps,持续发送模式
    ...    | Set stream broadcast | 1 | 15 | 1 | 200000 | ${Ixia_StreamRateMode_bps | stream_id=${1} | stream_mode=${IXIA_StreamMode_continue} |
    [Timeout]
    Ixiasend.Build Ether    dst=ff:ff:ff:ff:ff:ff    src=00:00:00:00:0a:0a
    Ixiasend.Build Ip    dst=255.255.255.255    src=20.1.1.1
    Ixiasend.Build Packet    ${64}
    Ixiasend.Set Stream Packet By Api    ${tp_chassis}    ${tp_card}    ${tp_port}    ${stream_id}
    Ixiasend.Set Stream Control    ${tp_chassis}    ${tp_card}    ${tp_port}    ${stream_id}    ${stream_rate}    ${stream_rate_mode}
    ...    ${stream_mode}    ${numPacket}    ${returnID}

Set stream dlf
    [Arguments]    ${tp_chassis}    ${tp_card}    ${tp_port}    ${stream_rate}    ${stream_rate_mode}    ${stream_id}
    ...    ${stream_mode}=${IXIA_StreamMode_continue}    ${numPacket}=${1}    ${returnID}=${1}
    [Documentation]    设置未知单播流
    ...
    ...    \ args:
    ...    \- ${tp_chassis} ${tp_card} ${tp_port} #设置端口
    ...    \- ${stream_rate}#流量速率
    ...    \- ${stream_rate_mode} #流量模式,取值参考全局变量${Ixia_StreamRateMode_bps}等
    ...    \- ${stream_id}=${1} #发送流序号,缺省为1
    ...    \- ${stream_mode}=${IXIA_StreamMode_continue} #发送模式，continue，stop，next，return to id，缺省为continue
    ...    \- ${numPacket}=${1} #发送报文个数,在next和return模式下,用于控制发送指定数量报文后切换到指定流
    ...    \- ${returnID}=${1} #return ID,在return模式下,用于确定返回到指定流.缺省返回流1
    ...
    ...    Example:
    ...
    ...    在1,15,1上配置未知单播流量,速率为200000bps,持续发送模式
    ...    | Set stream dlf | 1 | 15 | 1 | 200000 | ${Ixia_StreamRateMode_bps | stream_id=${1} | stream_mode=${IXIA_StreamMode_continue} |
    [Timeout]
    Ixiasend.Build Ether    dst=00:00:00:02:02:02    src=00:00:00:00:0d:0d
    Ixiasend.Build Ip    dst=10.1.1.1    src=20.1.1.1
    Ixiasend.Build Packet    ${64}
    Ixiasend.Set Stream Packet By Api    ${tp_chassis}    ${tp_card}    ${tp_port}    ${stream_id}
    Ixiasend.Set Stream Control    ${tp_chassis}    ${tp_card}    ${tp_port}    ${stream_id}    ${stream_rate}    ${stream_rate_mode}
    ...    ${stream_mode}    ${numPacket}    ${returnID}

Set stream multicast
    [Arguments]    ${tp_chassis}    ${tp_card}    ${tp_port}    ${stream_rate}    ${stream_rate_mode}    ${stream_id}
    ...    ${stream_mode}=${IXIA_StreamMode_continue}    ${numPacket}=${1}    ${returnID}=${1}
    [Documentation]    设置组播流
    ...
    ...    \ args:
    ...    \- ${tp_chassis} ${tp_card} ${tp_port} #设置端口
    ...    \- ${stream_rate}#流量速率
    ...    \- ${stream_rate_mode} #流量模式,取值参考全局变量${Ixia_StreamRateMode_bps}等
    ...    \- ${stream_id}=${1} #发送流序号,缺省为1
    ...    \- ${stream_mode}=${IXIA_StreamMode_continue} #发送模式，continue，stop，next，return to id，缺省为continue
    ...    \- ${numPacket}=${1} #发送报文个数,在next和return模式下,用于控制发送指定数量报文后切换到指定流
    ...    \- ${returnID}=${1} #return ID,在return模式下,用于确定返回到指定流.缺省返回流1
    ...
    ...    Example:
    ...
    ...    在1,15,1上配置组播流量,速率为200000bps,持续发送模式
    ...    | Set stream multicast | 1 | 15 | 1 | 200000 | ${Ixia_StreamRateMode_bps | stream_id=${1} | stream_mode=${IXIA_StreamMode_continue} |
    [Timeout]
    Ixiasend.Build Ether    dst=01:00:5e:01:01:01    src=00:00:00:00:0b:0b
    Ixiasend.Build Ip    dst=225.1.1.1    src=20.1.1.2
    Ixiasend.Build Packet    ${64}
    Ixiasend.Set Stream Packet By Api    ${tp_chassis}    ${tp_card}    ${tp_port}    ${stream_id}
    Ixiasend.Set Stream Control    ${tp_chassis}    ${tp_card}    ${tp_port}    ${stream_id}    ${stream_rate}    ${stream_rate_mode}
    ...    ${stream_mode}    ${numPacket}    ${returnID}

Set stream unicast
    [Arguments]    ${tp_chassis}    ${tp_card}    ${tp_port}    ${stream_rate}    ${stream_rate_mode}    ${stream_id}
    ...    ${stream_mode}=${IXIA_StreamMode_continue}    ${numPacket}=${1}    ${returnID}=${1}
    [Documentation]    设置已知单播流(需要与初始化配置时的静态mac配合,才能形成已知单播)
    ...
    ...    \ args:
    ...    \- ${tp_chassis} ${tp_card} ${tp_port} #设置端口
    ...    \- ${stream_rate}#流量速率
    ...    \- ${stream_rate_mode} #流量模式,取值参考全局变量${Ixia_StreamRateMode_bps}等
    ...    \- ${stream_id}=${1} #发送流序号,缺省为1
    ...    \- ${stream_mode}=${IXIA_StreamMode_continue} #发送模式，continue，stop，next，return to id，缺省为continue
    ...    \- ${numPacket}=${1} #发送报文个数,在next和return模式下,用于控制发送指定数量报文后切换到指定流
    ...    \- ${returnID}=${1} #return ID,在return模式下,用于确定返回到指定流.缺省返回流1
    ...
    ...    Example:
    ...
    ...    在1,15,1上配置已知单播流量,速率为200000bps,持续发送模式
    ...    | Set stream multicast | 1 | 15 | 1 | 200000 | ${Ixia_StreamRateMode_bps | stream_id=${1} | stream_mode=${IXIA_StreamMode_continue} |
    [Timeout]
    Ixiasend.Build Ether    dst=${STATIC_UNICAST_MAC}    src=00:00:00:00:0c:0c
    Ixiasend.Build Ip    dst=10.1.1.1    src=20.1.1.1
    Ixiasend.Build Packet    ${64}
    Ixiasend.Set Stream Packet By Api    ${tp_chassis}    ${tp_card}    ${tp_port}    ${stream_id}
    Ixiasend.Set Stream Control    ${tp_chassis}    ${tp_card}    ${tp_port}    ${stream_id}    ${stream_rate}    ${stream_rate_mode}
    ...    ${stream_mode}    ${numPacket}    ${returnID}

Set Storm Control
    [Arguments]    ${alias}    ${port}    ${cfg_type}    ${cfg_value}
    [Documentation]    功能:在指定设备的指定端口上配置广播抑制功能
    ...
    ...    \args:
    ...    \- alias #指定设备
    ...    \- port #配置端口
    ...    \- cfg_type#抑制类型
    ...    \- cfg_value#抑制值
    ...
    ...
    ...    return:
    ...    \- expect_rate #返回配置风暴抑制后，交换设备自适应的抑制值。当抑制单位为kbps时，返回值自动*1000，即以bps为单位（方便与ixia适配），当抑制单位为pps时，返回值无修改。
    log    配置端口风暴抑制功能
    ${cfg_storm_control_config}=    Set Variable if    ${CMD_CFG_STORM_CONTROL_MODE}==${1}    ${CMD_STORM_CONTROL} ${cfg_type} ${cfg_value}    ${CMD_CFG_STORM_CONTROL_MODE}==${2} and '${STREAM_TYPE}'=='bps'    ${CMD_STORM_CONTROL} ${cfg_type} kbps ${cfg_value}    ${CMD_CFG_STORM_CONTROL_MODE}==${2} and '${STREAM_TYPE}'=='pps'
    ...    ${CMD_STORM_CONTROL} ${cfg_type} pps ${cfg_value}
    Exec Cmd List In ConfigMode    ${alias}    interface ${port}
    ${ret}=    Exec Cmd    ${alias}    ${cfg_storm_control_config}
    Exec Cmd    ${alias}    show run interface ${port}
    #检查是否有配置错误信息返回
    ${check_result}=    Check set error    ${ret}
    Run Keyword If    '${check_result}'!='None'    Fail    the Device may be don't support the "${cfg_storm_control_config}" \ or Set error.    TAG_CFG_ERROR
    #获取交换机风暴抑制配置的自调整值
    ${scaled_value}=    Tools.Get Value From String    ${ret}    scaled to (\\d+)
    ${scaled_value}=    Set Variable if    '${scaled_value}'!='None'    ${scaled_value}    ${cfg_value}
    #测试kbps时，预期速率为自调整抑制值*1000(即bps)，方便ixia使用。
    Run Keyword If    '${STREAM_TYPE}'=='bps'    Return From Keyword    ${${scaled_value}*1000}
    Run Keyword If    '${STREAM_TYPE}'=='pps'    Return From Keyword    ${scaled_value}
    [Return]    ${expect_rate}

Unset Storm Control
    [Arguments]    ${alias}    ${port}    ${type}=${EMPTY}
    [Documentation]    功能:在指定设备的指定端口上删除指定的广播抑制功能
    ...
    ...    \args:
    ...    \- alias #指定设备
    ...    \- port #配置端口
    ...    \- type #抑制类型
    ...
    ...    根据不同的命令行风格${CMD_CFG_NO_STORM_CONTROL}，使用不同的删除命令。
    ${cfg_command}=    Set Variable if    ${CMD_CFG_NO_STORM_CONTROL_MODE}==${1}    no ${CMD_STORM_CONTROL}    ${CMD_CFG_NO_STORM_CONTROL_MODE}==${2}    no ${CMD_STORM_CONTROL} ${type}
    Exec Cmd List In ConfigMode    ${alias}    interface ${port}    ${cfg_command}

Set Storm Control Fail
    [Arguments]    ${alias}    ${port}    ${cfg_type}    ${cfg_value}
    [Documentation]    功能:检查配置广播抑制时是否出现"Invalid input"或者"not supported on group member port"错误
    ...
    ...    \args:
    ...    \- alias #指定设备
    ...    \- port #指定端口端口
    ...    \- cfg_type#抑制类型
    ...    \- cfg_value#抑制值
    ...
    ...    return:
    ...    \- check_result #检查结果,为True时表示检查到指定错误,为False时表示未检查到指定错误。
    ${cfg_storm_control_config}=    Set Variable if    ${CMD_CFG_STORM_CONTROL_MODE}==${1}    ${CMD_STORM_CONTROL} ${cfg_type} ${cfg_value}    ${CMD_CFG_STORM_CONTROL_MODE}==${2} and '${STREAM_TYPE}'=='bps'    ${CMD_STORM_CONTROL} ${cfg_type} kbps ${cfg_value}    ${CMD_CFG_STORM_CONTROL_MODE}==${2} and '${STREAM_TYPE}'=='pps'
    ...    ${CMD_STORM_CONTROL} ${cfg_type} pps ${cfg_value}
    Exec Cmd List In ConfigMode    ${alias}    interface ${port}
    ${ret}=    Exec Cmd    ${alias}    ${cfg_storm_control_config}
    Exec Cmd    ${alias}    show run interface ${port}
    ${check_result}=    Tools.Is Match From String    ${ret}    (not supported on group member port|Invalid input)
    Run Keyword If    ${check_result} ==False    Fail    May be set Storm Control sussessful and check no error!
    [Return]    ${check_result}

Unset Storm Control Fail
    [Arguments]    ${alias}    ${port}    ${type}=${EMPTY}
    [Documentation]    功能:检查删除广播抑制时是否出现"Invalid input"或者"not supported on group member port"错误
    ...
    ...    \args:
    ...    \- alias #指定设备
    ...    \- port #指定端口
    ...    \- type#部分设备在删除storm-control时需要指定类型
    ...
    ...
    ...    return:
    ...    \- check_result #检查结果,为True时表示检查到指定错误,为False时表示未检查到指定错误。
    ${cfg_command}=    Set Variable if    ${CMD_CFG_NO_STORM_CONTROL_MODE}==${1}    no ${CMD_STORM_CONTROL}    ${CMD_CFG_NO_STORM_CONTROL_MODE}==${2}    no ${CMD_STORM_CONTROL} ${type}
    Exec Cmd List In ConfigMode    ${alias}    interface ${port}
    ${ret}=    Exec Cmd    ${alias}    ${cfg_command}
    Exec Cmd    ${alias}    show run interface ${port}
    ${check_result}=    Tools.Is Match From String    ${ret}    (not supported on group member port|Invalid input)
    Run Keyword If    '${check_result}'!='True'    Fail    May be unset Storm Control sussessful and check no error!
    [Return]    ${check_result}

Check Set Storm Control
    [Arguments]    ${alias}    ${port}    ${cfg_type}    ${loglevel}=WARN
    [Documentation]    功能:检查端口是否有指定类型的广播抑制配置
    ...
    ...    \args:
    ...    \- alias #指定设备
    ...    \- port #指定端口端口
    ...    \- cfg_type#抑制类型
    ...    \- loglevel#检查到错误时,以何种log级别记录,参数参考"log"关键字的级别取值
    ...
    ...    return:
    ...    \- check_result #检查结果,为True时表示端口上有指定类型的广播抑制配置,为False时没有指定类型的广播抑制配置.
    ${cfg_command}=    Set Variable    ${CMD_STORM_CONTROL} ${cfg_type}
    ${ret}=    Exec Cmd    ${alias}    show run interface ${port}
    ${check_result}=    Tools.Is Match From String    ${ret}    ${cfg_command}
    Run Keyword If    ${check_result} !=True    log    Can not find "${cfg_command}" in Show run interface ${port}    ${loglevel}
    [Return]    ${check_result}

Check Global Cmd Mode
    Exec Cmd List In ConfigMode    ${s1_alias}
    ${ret}=    Exec Cmd    ${s1_alias}    ${CMD_STORM_CONTROL} ?
    ${check_global_mode}=    Tools.Is Match From String    '${ret}'    Unrecognized|Invalid
    Run Keyword if    ${check_global_mode}    Set Global Variable    ${GLOBAL_StormControl_MODE}    ${False}
    ...    ELSE    Set Global Variable    ${GLOBAL_StormControl_MODE}    ${True}
    ${check_support_kbps}=    Tools.Is Match From String    '${ret}'    kbps
    ${check_support_pps}=    Tools.Is Match From String    '${ret}'    pps
    Run Keyword If    ${check_support_kbps}    Set Global Variable    ${SUPPORT_kbps}    ${1}    ELSE    Set Global Variable
    ...    ${SUPPORT_kbps}    ${0}
    Run Keyword If    ${check_support_pps}    Set Global Variable    ${SUPPORT_pps}    ${1}    ELSE    Set Global Variable
    ...    ${SUPPORT_pps}    ${0}
    Run Keyword If    ${GLOBAL_StormControl_MODE}    Set Global Variable    ${CMD_CFG_STORM_CONTROL_MODE}    ${1}
    Exec Cmd List In ConfigMode    ${s1_alias}    interface ${s1p1}
    ${ret}=    Exec Cmd    ${s1_alias}    no ${CMD_STORM_CONTROL} ?
    Read
    ${check_res}=    Tools.Is Match From String    '${ret}'    broadcast
    Run Keyword If    ${check_res}    Set Global Variable    ${CMD_CFG_NO_STORM_CONTROL_MODE}    ${2}

Check Interface Cmd Mode
    Exec Cmd List In ConfigMode    ${s1_alias}    interface ${s1p1}
    ${ret}=    Exec Cmd    ${s1_alias}    ${CMD_STORM_CONTROL} broadcast ?
    Read
    ${check_support_kbps}=    Tools.Is Match From String    '${ret}'    kbps
    ${check_support_pps}=    Tools.Is Match From String    '${ret}'    pps
    Run Keyword If    ${check_support_kbps}    Set Global Variable    ${SUPPORT_kbps}    ${1}    ELSE    Set Global Variable
    ...    ${SUPPORT_kbps}    ${0}
    Run Keyword If    ${check_support_pps}    Set Global Variable    ${SUPPORT_pps}    ${1}    ELSE    Set Global Variable
    ...    ${SUPPORT_pps}    ${0}
    Run Keyword If    ${check_support_kbps} or ${check_support_pps}    Set Global Variable    ${CMD_CFG_STORM_CONTROL_MODE}    ${2}
    Run Keyword unless    ${check_support_kbps} and ${check_support_pps}    Set Global Variable    ${SUPPORT_kbps}    ${1}
    Run Keyword unless    ${check_support_kbps} and ${check_support_pps}    Set Global Variable    ${CMD_CFG_STORM_CONTROL_MODE}    ${1}
    ${ret}=    Exec Cmd    ${s1_alias}    no ${CMD_STORM_CONTROL} ?
    Read
    ${check_res}=    Tools.Is Match From String    '${ret}'    broadcast
    Run Keyword If    ${check_res}    Set Global Variable    ${CMD_CFG_NO_STORM_CONTROL_MODE}    ${2}

Set Global Storm Control
    [Arguments]    ${alias}    ${type}
    [Documentation]    功能:在全局模式下配置风暴抑制功能
    ...
    ...    \args:
    ...    \- alias #指定设备
    ...    \- type#抑制方式
    Exec Cmd List In ConfigMode    ${alias}    ${CMD_STORM_CONTROL} ${type}

Unset Global Storm Control
    [Arguments]    ${alias}
    [Documentation]    功能:在全局模式下恢复风暴抑制功能为缺省值
    ...
    ...    \args:
    ...    \- alias #指定设备
    Exec Cmd List In ConfigMode    ${alias}    no ${CMD_STORM_CONTROL}
